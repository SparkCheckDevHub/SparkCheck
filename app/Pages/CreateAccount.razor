@page "/createaccount"
@layout MainLayout
@inject NavigationManager Navigation
@inject UserService UserService
@using SparkCheck.Services
@using SparkCheck.Models

<MudPaper Style="min-height: 100vh; padding: 1rem; display: flex; flex-direction: column; justify-content: center;">
	<EditForm Model="Account" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
		<DataAnnotationsValidator />

		<MudStack AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
			<MudText Typo="Typo.h5">Create Your Account</MudText>

			@if (!string.IsNullOrWhiteSpace(SuccessMessage)) {
				<MudAlert Severity="Severity.Success" Variant="Variant.Filled" Dense="true">
					@SuccessMessage
				</MudAlert>
			}
		</MudStack>


		<MudTextField Label="Username"
					  For="@(() => Account.strUsername)"
					  @bind-Value="Account.strUsername"
					  Required="true"
					  Class="mb-2" />

		<MudTextField Label="First Name"
					  For="@(() => Account.strFirstName)"
					  @bind-Value="Account.strFirstName"
					  Required="true"
					  Class="mb-2" />

		<MudTextField Label="Last Name"
					  For="@(() => Account.strLastName)"
					  @bind-Value="Account.strLastName"
					  Required="true"
					  Class="mb-2" />

		<MudDatePicker Label="Date of Birth"
					   @bind-Date="Account.dtmDateOfBirth"
					   DateFormat="MM/dd/yyyy"
					   MaxDate="@DateTime.Today"
					   Required="true"
					   Editable="true"
					   Class="mb-1" />

		<MudTextField Label="Phone Number"
					  For="@(() => Account.strPhone)"
					  @bind-Value="Account.strPhone"
					  Required="true"
					  Class="mb-2" />

		<MudTextField Label="Email Address"
					  For="@(() => Account.strEmail)"
					  @bind-Value="Account.strEmail"
					  Required="true"
					  Class="mb-2" />

		<MudGrid Class="mt-4">
			<MudItem xs="6">
				<MudButton Variant="Variant.Filled"
						   StartIcon="@Icons.Material.Filled.ArrowBack"
						   FullWidth="true"
						   OnClick="Cancel">
					Back
				</MudButton>
			</MudItem>
			<MudItem xs="6">
				<MudButton Variant="Variant.Filled"
						   EndIcon="@Icons.Material.Filled.Check"
						   FullWidth="true"
						   ButtonType="ButtonType.Submit">
					Create
				</MudButton>
			</MudItem>
		</MudGrid>
	</EditForm>
</MudPaper>

@code {
	private CreateAccountModel Account = new();
	private string? SuccessMessage;
	private string? ErrorMessage;

	private async Task HandleValidSubmit() {
		Console.WriteLine($"About to save phone: {Account.strPhone}");
		Console.WriteLine($"DOB: {Account.dtmDateOfBirth?.ToShortDateString() ?? "null"}");

		var result = await UserService.CreateUserAsync(Account);
		if (result.Success) {
			SuccessMessage = "Account created successfully!";
			Account = new CreateAccountModel(); // Reset the form

			// Force re-render
			StateHasChanged();

			await Task.Delay(2000); // Give user time to see the success message

			Navigation.NavigateTo("/"); // Redirect after success
		}
		else {
			ErrorMessage = result.ErrorMessage; // Show error message if the result fails
		}
	}

	private void HandleInvalidSubmit(EditContext context) {
		Console.WriteLine("Form submission was invalid. Errors:");
		foreach (var error in context.GetValidationMessages())
			Console.WriteLine($" - {error}");
	}

	private void Cancel() => Navigation.NavigateTo("/"); // Navigate to the previous page
}
