@* @page "/phoneauth"
@using SparkCheck.Services
@using MudBlazor
@using SparkCheck.Models.ViewModels
@layout MainLayout
@inject NavigationManager Navigation
@inject UserService UserService
@inject UserSessionService UserSession

<MudPaper Style="min-height: 100vh; padding: 1rem; display: flex; flex-direction: column; justify-content: center;">
    <EditForm Model="model" OnValidSubmit="HandleVerify">
        <DataAnnotationsValidator />

        <MudStack AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
            <MudText Typo="Typo.h5">Enter Verification Code</MudText>

            @if (!string.IsNullOrWhiteSpace(ErrorMessage)) {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Dense="true">
                    @ErrorMessage
                </MudAlert>
            }
        </MudStack>

        <MudTextField Label="Verification Code"
                      @bind-Value="model.Code"
                      MaxLength="6"
                      Required="true"
                      Immediate="true"
                      Class="mb-2" />

        <MudGrid Class="mt-4">
            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack"
                           FullWidth="true" OnClick="Cancel">
                    Cancel
                </MudButton>
            </MudItem>
            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Check"
                           ButtonType="ButtonType.Submit" FullWidth="true">
                    Verify
                </MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudPaper>

@code {
    private PhoneAuthModel model = new();
    private string? ErrorMessage;

    private async Task HandleVerify() {
        ErrorMessage = null;

        var phone = UserSession.strPhone;
        var userId = UserSession.intUserID;

        Console.WriteLine("[VERIFY START] User pressed submit on verification form.");
        Console.WriteLine($" - strPhone: {phone}");
        Console.WriteLine($" - intUserID: {userId}");
        Console.WriteLine($" - Entered Code: {model.Code}");

        if (userId == null || string.IsNullOrWhiteSpace(phone)) {
            ErrorMessage = "Your session has expired. Please log in again.";
            Console.WriteLine("[SESSION MISSING] Redirecting to /phonelogin");
            Navigation.NavigateTo("/phonelogin");
            return;
        }

        try {
            var result = await UserService.VerifyPhoneLoginAsync(phone, model.Code, userId.Value);

            if (result.blnSuccess) {
                UserSession.blnIsAuthenticated = true;
                var user = await UserService.GetUserById(userId.Value);
                if (user is not null) {
                    UserSession.strUsername = user.strUsername;
                    UserSession.strFirstName = user.strFirstName;
                    UserSession.strLastName = user.strLastName;
                    UserSession.dtmDateOfBirth = user.dtmDateOfBirth;
                    UserSession.intGenderID = user.intGenderID;
                    UserSession.blnIsActive = user.blnIsActive;
                    UserSession.blnIsOnline = true;
                }

                await UserService.UpdateUserStatusAsync(userId.Value, true);
                Console.WriteLine("[NAVIGATION] Redirecting to /dashboard");
                Navigation.NavigateTo("/dashboard");
            }
            else {
                ErrorMessage = result.strErrorMessage ?? "Invalid verification code. Please try again.";
                Console.WriteLine($"[FAILURE] {ErrorMessage}");
            }
        }
        catch (Exception ex) {
            ErrorMessage = "An unexpected error occurred. Please try again.";
            Console.WriteLine($"[EXCEPTION] Phone verification error: {ex}");
        }
    }

    private void Cancel() {
        Console.WriteLine("[CANCEL] Navigating back to /phonelogin");
        Navigation.NavigateTo("/phonelogin");
    }
}

 *@

@page "/phoneauth"
@using SparkCheck.Services
@using MudBlazor
@using SparkCheck.Models.ViewModels
@layout MainLayout
@inject NavigationManager Navigation
@inject UserService UserService
@inject UserSessionService UserSession

<!-- MOBILE VIEW (XS, SM) -->
<MudHidden Breakpoint="Breakpoint.MdAndUp">
	<EditForm Model="model" OnValidSubmit="HandleVerify" style="width: 100%;">
		<DataAnnotationsValidator />

		<MudStack Spacing="6" AlignItems="AlignItems.Center">

			<img src="images/logo.png"
				 alt="SparkCheck logo"
				 style="width: 100%;" />

			<MudText Typo="Typo.body1" Align="Align.Center" Class="spark-text">
				Enter Verification Code
			</MudText>

			@if (!string.IsNullOrWhiteSpace(ErrorMessage)) {
				<MudAlert Severity="Severity.Error" Variant="Variant.Filled" Dense="true">
					@ErrorMessage
				</MudAlert>
			}

			<MudStack Spacing="4" Style="width: 80%; max-width: 320px;">
				<MudTextField ShrinkLabel Label="Verification Code"
							  @bind-Value="model.Code"
							  MaxLength="6"
							  Required="true"
							  Immediate="true"
							  Variant="Variant.Outlined" />
			</MudStack>

			<MudGrid Style="width: 80%; max-width: 320px;" GutterSize="3">
				<MudItem xs="6">
					<MudButton Variant="Variant.Outlined" Class="secondary-button"
							   OnClick="Cancel" FullWidth="true">
						Back
					</MudButton>
				</MudItem>
				<MudItem xs="6">
					<MudButton Variant="Variant.Filled" Class="primary-button"
							   ButtonType="ButtonType.Submit" FullWidth="true">
						Verify
					</MudButton>
				</MudItem>
			</MudGrid>

			<MudText Typo="Typo.subtitle2" Align="Align.Center" Class="spark-text">
				© 2025 SparkCheck | Cortanix™
			</MudText>

		</MudStack>
	</EditForm>
</MudHidden>

<!-- DESKTOP/TABLET VIEW (MD and up) -->
<MudHidden Breakpoint="Breakpoint.SmAndDown">
	<MudContainer MaxWidth="MaxWidth.Medium">
		<MudStack Spacing="8" AlignItems="AlignItems.Center">
			<img src="images/logo.png"
				 alt="SparkCheck logo"
				 style="width: 70%;" />

			<MudText Typo="Typo.h6" Align="Align.Center" Class="spark-text">
				SparkCheck is optimized for mobile devices.
			</MudText>

			<MudText Typo="Typo.body1" Align="Align.Center" Class="spark-text">
				For the best experience, please open SparkCheck on your phone or
				add it to your home screen.
			</MudText>

			<MudText Typo="Typo.subtitle2" Align="Align.Center" Class="spark-text">
				© 2025 SparkCheck | Cortanix™
			</MudText>
		</MudStack>
	</MudContainer>
</MudHidden>

@code {
	private PhoneAuthModel model = new();
	private string? ErrorMessage;

	private async Task HandleVerify() {
		ErrorMessage = null;

		var phone = UserSession.strPhone;
		var userId = UserSession.intUserID;

		if (userId == null || string.IsNullOrWhiteSpace(phone)) {
			ErrorMessage = "Your session has expired. Please log in again.";
			Navigation.NavigateTo("/phonelogin");
			return;
		}

		try {
			var result = await UserService.VerifyPhoneLoginAsync(phone, model.Code, userId.Value);

			if (result.blnSuccess) {
				UserSession.blnIsAuthenticated = true;
				var user = await UserService.GetUserById(userId.Value);
				if (user is not null) {
					UserSession.strUsername = user.strUsername;
					UserSession.strFirstName = user.strFirstName;
					UserSession.strLastName = user.strLastName;
					UserSession.dtmDateOfBirth = user.dtmDateOfBirth;
					UserSession.intGenderID = user.intGenderID;
					UserSession.blnIsActive = user.blnIsActive;
					UserSession.blnIsOnline = true;
				}

				await UserService.UpdateUserStatusAsync(userId.Value, true);
				Navigation.NavigateTo("/dashboard");
			}
			else {
				ErrorMessage = result.strErrorMessage ?? "Invalid verification code. Please try again.";
			}
		}
		catch (Exception) {
			ErrorMessage = "An unexpected error occurred. Please try again.";
		}
	}

	private void Cancel() => Navigation.NavigateTo("/phonelogin");
}
