@page "/match"
@using Microsoft.EntityFrameworkCore;
@using System.Timers;
@using System.Text;
@using System.Text.Json;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using MudBlazor
@using SparkCheck.Data
@layout MainLayout
@inherits SparkCheck.Shared.SecureBasePage
@implements IAsyncDisposable
@inject IJSRuntime JS

@if (isMatched) {
	<MudStack Class="conversation">

		<MudChatHeader Class="pa-2" Style="width: 100%; max-width: 400px;">
			<MudAvatar Size="Size.Medium">
				@if (theirProfilePicture != null) {
					<MudImage Src="@GetImageSrc(theirProfilePicture)" />
				}
				else {
					<i style="font-size: 1rem" class="fa fa-user"></i>
				}
			</MudAvatar>
			<MudText Typo="Typo.h6">@strDisplayName</MudText>
			<MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Primary" OnClick="@(() => NavigateTo("/unmatch"))" />
		</MudChatHeader>

		<MudStack Spacing="3" AlignItems="AlignItems.Center" Style="width: 100%;">

			<MudPaper id="chatScroll" Class="chat-container" Style="width: 100%; max-width: 400px;">
				@foreach (var (author, message) in lstChats) {
					if (author == "Me") {
						<MudChat Class="me" ChatPosition="ChatBubblePosition.End">
							<MudChatBubble>
								@message
							</MudChatBubble>
							<MudAvatar Size="Size.Medium">
								@if (myProfilePicture != null) {
									<MudImage Src="@GetImageSrc(myProfilePicture)" />
								}
								else {
									<i style="font-size: 1rem" class="fa fa-user"></i>
								}
							</MudAvatar>
						</MudChat>
					}
					else if (author == "Other") {
						<MudChat ChatPosition="ChatBubblePosition.Start">
							<MudAvatar Size="Size.Medium">
								@if (theirProfilePicture != null) {
									<MudImage Src="@GetImageSrc(theirProfilePicture)" />
								}
								else {
									<i style="font-size: 1rem" class="fa fa-user"></i>
								}
							</MudAvatar>
							<MudChatBubble>
								@message
							</MudChatBubble>
						</MudChat>
					}
					else {
						<MudChat ChatPosition="ChatBubblePosition.Start">
							<MudAvatar Size="Size.Medium">
								<i style="font-size: 1rem" class="fa fa-info"></i>
							</MudAvatar>
							<MudChatBubble>
								<b>[SYSTEM] </b>@message
							</MudChatBubble>
						</MudChat>
					}
				}
			</MudPaper>

			<MudChatFooter Class="chat-footer" Style="width: 100%; max-width: 400px;">
				<MudTextField Placeholder="Type a message…"
							  T="string"
							  FullWidth="true"
							  Variant="Variant.Outlined"
							  Adornment="Adornment.End"
							  @bind-Value="strChatMessage"
							  AdornmentIcon="@Icons.Material.Filled.Send"
							  OnAdornmentClick="@(() => SendMessage())" />
			</MudChatFooter>

			<MudGrid GutterSize="3">
				<MudItem xs="6">
					<MudButton Variant="Variant.Outlined"
							   Class="secondary-button"
							   FullWidth="true"
							   OnClick="@(() => GenerateDatePlan())">
						@strDatePlan
					</MudButton>
				</MudItem>
				<MudItem xs="6">
					<MudButton Variant="Variant.Filled"
							   Class="primary-button"
							   ButtonType="ButtonType.Submit"
							   FullWidth="true"
							   OnClick="@(() => GenerateIceBreaker())">
						@strIceBreaker
					</MudButton>
				</MudItem>
			</MudGrid>

		</MudStack>

	</MudStack>
	<script>
		window.scrollChatList = function () {
		  var el = document.getElementById('chatScroll');
		  if (el) el.scrollTop = el.scrollHeight;
		};
	</script>

}
else {

	<MudContainer MaxWidth="MaxWidth.False" Class="d-flex flex-column min-vh-100 justify-center align-center px-4">
		<MudText Typo="Typo.h5" Class="mb-4 text-center">
			Come back here after you have found a match.
		</MudText>

		<MudList T="string" Dense="true">
			<MudListItem T="string" OnClick="@(() => NavigateTo("/matchqueue"))">
				<MudIcon Icon="@Icons.Material.Filled.Favorite" Class="me-2" />
				Join the Match Queue when you're ready to meet someone special.
			</MudListItem>
		</MudList>
	</MudContainer>
}

@inject UserService UserService
@inject MatchService MatchService
@inject MediaService MediaService
@inject HttpClient HttpClient
@inject IDbContextFactory<AppDbContext> DbFactory
@code {
	private Timer refreshTimer = new System.Timers.Timer(2000);
	private int intLastChatID = 0;
	private int intMatchID = 0;
	private List<(string, string)> lstChats = new List<(string, string)>();
	private bool isMatched = false;
	TUserMedia? myProfilePicture = null;
	TUserMedia? theirProfilePicture = null;
	private TUsers? otherUser = null;
	private string strDisplayName = string.Empty;
	private string strChatMessage = string.Empty;
	private string strDatePlan = "Date Plan";
	private string strIceBreaker = "Ice Breaker";

	private void NavigateTo(string url) {
		Navigation.NavigateTo(url);
	}

	private async Task SendMessage() {
		if (string.IsNullOrEmpty(strChatMessage) || intMatchID == 0) {
			return;
		}
		// Clear input box
		string strTrimmedMessage = strChatMessage.Trim();

		strChatMessage = string.Empty;

		// Add message to the database
		using var context = DbFactory.CreateDbContext();
		await context.Database.ExecuteSqlRawAsync(
			@"INSERT INTO TChatMessages (intSenderUserID, intMatchID, strMessageText, dtmSentAt, blnIsActive)
                VALUES ({0}, {1}, {2}, GETDATE(), 1)",
			UserSession.intUserID ?? 0, intMatchID, strTrimmedMessage
		);
	}

	private async Task GenerateDatePlan() {
		if (intMatchID == 0) {
			return;
		}

		using var context = DbFactory.CreateDbContext();
		
		strDatePlan = "Generating...";
		StateHasChanged();

		// Get interests of both users
		var myInterests = await context
			.Set<TInterests>()
			.FromSqlRaw(@"
				SELECT TInterests.strInterest
				FROM TInterests
				JOIN TUserInterests ON TUserInterests.intInterestID = TInterests.intInterestID
				JOIN TUsers ON TUserInterests.intUserID = TUsers.intUserID
				WHERE TUsers.intUserID = {0}
				",
				UserSession.intUserID ?? 0
			)
			.Select(interest => interest.strInterest)
			.ToListAsync();

		var theirInterests = await context
			.Set<TInterests>()
			.FromSqlRaw(@"
				SELECT TInterests.strInterest
				FROM TInterests
				JOIN TUserInterests ON TUserInterests.intInterestID = TInterests.intInterestID
				JOIN TUsers ON TUserInterests.intUserID = TUsers.intUserID
				WHERE TUsers.intUserID = {0}
				",
				otherUser?.intUserID ?? 0
			)
			.Select(interest => interest.strInterest)
			.ToListAsync();

		// Get each user's location
		var myLocation = await GetLocationAsync(UserSession.intUserID ?? 0);
		var theirLocation = await GetLocationAsync(otherUser?.intUserID ?? 0);
		
		// Craft prompt to generate date plan
		string strPrompt = "Generate a date plan for two people with the following interests:\n";
		strPrompt += "My interests: " + string.Join(", ", myInterests) + "\n";
		strPrompt += "Their interests: " + string.Join(", ", theirInterests) + "\n";
		strPrompt += "My location: " + myLocation + "\n";
		strPrompt += "Their location: " + theirLocation + "\n";
		strPrompt += "Do not use emojis. Make everything on one line. Maximum 8 sentences.\n";
		strPrompt += "Make sure to say similar: Since I/you/we both like X interest, we should do X,Y,Z.\n";

		// Send message
		await context.Database.ExecuteSqlRawAsync(
			@"INSERT INTO TChatMessages (intSenderUserID, intMatchID, strMessageText, dtmSentAt, blnIsActive)
                VALUES ({0}, {1}, {2}, GETDATE(), 1)",
			UserSession.intUserID ?? 0, intMatchID, "[Date Plan] " + await GenerateChatGPTAsync(strPrompt)
		);

		strDatePlan = "Date Plan";
		StateHasChanged();
	}
	private async Task GenerateIceBreaker() {
		if (intMatchID == 0) {
			return;
		}

		using var context = DbFactory.CreateDbContext();

		strIceBreaker = "Generating...";
		StateHasChanged();

		// Get interests of both users
		var myInterests = await context
			.Set<TInterests>()
			.FromSqlRaw(@"
				SELECT TInterests.strInterest
				FROM TInterests
				JOIN TUserInterests ON TUserInterests.intInterestID = TInterests.intInterestID
				JOIN TUsers ON TUserInterests.intUserID = TUsers.intUserID
				WHERE TUsers.intUserID = {0}
				",
				UserSession.intUserID ?? 0
			)
			.Select(interest => interest.strInterest)
			.ToListAsync();

		var theirInterests = await context
			.Set<TInterests>()
			.FromSqlRaw(@"
				SELECT TInterests.strInterest
				FROM TInterests
				JOIN TUserInterests ON TUserInterests.intInterestID = TInterests.intInterestID
				JOIN TUsers ON TUserInterests.intUserID = TUsers.intUserID
				WHERE TUsers.intUserID = {0}
				",
				otherUser?.intUserID ?? 0
			)
			.Select(interest => interest.strInterest)
			.ToListAsync();

		// Get each user's location
		var myLocation = await GetLocationAsync(UserSession.intUserID ?? 0);
		var theirLocation = await GetLocationAsync(otherUser?.intUserID ?? 0);

		// Craft prompt to generate date plan
		string strPrompt = "Generate an ice breaker question for two people. Below is additional context about the users:\n";
		strPrompt += "My interests: " + string.Join(", ", myInterests) + "\n";
		strPrompt += "Their interests: " + string.Join(", ", theirInterests) + "\n";
		strPrompt += "My location: " + myLocation + "\n";
		strPrompt += "Their location: " + theirLocation + "\n";
		strPrompt += "Try to be unique and clever with the ice breakers, as well as something easy to\n";
		strPrompt += "answer. Incorporate the user's interests sometimes, but not always.\n";
		strPrompt += "Do not use emojis. Make everything on one line. Maximum 1 sentence.\n";

		// Send message
		await context.Database.ExecuteSqlRawAsync(
			@"INSERT INTO TChatMessages (intSenderUserID, intMatchID, strMessageText, dtmSentAt, blnIsActive)
                VALUES ({0}, {1}, {2}, GETDATE(), 1)",
			UserSession.intUserID ?? 0, intMatchID, "[Ice Breaker] " + await GenerateChatGPTAsync(strPrompt)
		);

		strIceBreaker = "Ice Breaker";
		StateHasChanged();
	}

	async Task<string?> GenerateChatGPTAsync(string prompt)
	{
		try {
			HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Environment.GetEnvironmentVariable("SC_OPENAI_KEY"));
			HttpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

			var json = JsonSerializer.Serialize(new
			{
				model = "gpt-4o-mini",
				input = prompt,
				temperature = 0.9,
				store = true
			});

			var response = await HttpClient.PostAsync("https://api.openai.com/v1/responses", new StringContent(json, Encoding.UTF8, "application/json"));
			JsonElement jsonOutput = JsonDocument.Parse(await response.Content.ReadAsStringAsync()).RootElement;

			return jsonOutput.GetProperty("output")[0].GetProperty("content")[0].GetProperty("text").GetString();
		} catch (Exception e) {};

		return "Could not generate :(";
	}

	async Task<string> GetLocationAsync(int intUserID)
	{
		try {
			// Get the user object and preferences
			TUsers? user = await UserService.GetUserById(intUserID);
			TUserPreferences? preferences = await UserService.GetUserPreferencesAsync(intUserID);

			// No location set or profile hidden?
			if (user.decLatitude == null || user.decLongitude == null || preferences.blnShowProfile == false) {
				return "Hidden";
			}

			// Find zipcode row using haversine forumula (https://stackoverflow.com/questions/2234204/find-nearest-latitude-longitude-with-an-sql-query)
			using var context = DbFactory.CreateDbContext();
			var zipCode = await context
				.Set<TZipCodes>()
				.FromSqlRaw(@"
					SELECT TOP 1 *, SQRT(
						POWER(69.1 * (decLatitude - {0}), 2) +
						POWER(69.1 * ({1} - decLongitude) * COS(decLatitude / 57.3), 2)) AS Distance
					FROM TZipCodes
					ORDER BY Distance ASC
					",
					user.decLatitude, user.decLongitude
				)
				.FirstOrDefaultAsync();

			// Get city and state
			var city = await context
				.Set<TCities>()
				.FromSqlRaw(@"
					SELECT * FROM TCities WHERE intCityID = {0}
					",
					zipCode.intCityID
				)
				.FirstOrDefaultAsync();

			var state = await context
				.Set<TStates>()
				.FromSqlRaw(@"
					SELECT * FROM TStates WHERE intStateID = {0}
					",
					city.intStateID
				)
				.FirstOrDefaultAsync();
			
			// Format location
			return city.strCity + ", " + state.strStateCode;	
		}
		catch (Exception e){};	
		return "Hidden";
	}

	private async void RefreshChat(Object source, ElapsedEventArgs e) {
		Console.WriteLine("Refreshing chat...");

		// Get latest messags from the database
		if (intMatchID == 0) {
			return;
		}

		// Is match over?
		var match = await MatchService.GetLatestActiveMatchAsync(UserSession.intUserID);
		if (match == null || match.intMatchID != intMatchID) {
			// Match is over, stop the timer and clear the chat
			refreshTimer.Stop();
			refreshTimer.Dispose();
			refreshTimer = null;
			intMatchID = 0;
			lstChats.Add(("System", "Match is over. You can return to the match queue."));
			await InvokeAsync(() => {
				// Update the UI
				StateHasChanged();
				JS.InvokeVoidAsync("scrollChatList");
			});
			return;
		}

		using var context = DbFactory.CreateDbContext();
		var newChats = await context
			.Set<TChatMessages>()
			.FromSqlRaw(@"
				SELECT TChatMessages.*
				FROM TChatMessages
				JOIN TMatches ON TMatches.intMatchID = TChatMessages.intMatchID
				AND TMatches.intMatchID = {0}
				WHERE intChatMessageID > {1}
				",
				intMatchID, intLastChatID
			)
			.ToListAsync();

		// Add new messages to the chat list
		if (newChats.Count > 0) {
			foreach (var chat in newChats) {
				if (chat.intSenderUserID == UserSession.intUserID) {
					lstChats.Add(("Me", chat.strMessageText));
				}
				else {
					lstChats.Add(("Other", chat.strMessageText));
				}

				// Update the last chat ID
				intLastChatID = chat.intChatMessageID;
			}
			await InvokeAsync(() => {
				// Update the UI
				StateHasChanged();
				JS.InvokeVoidAsync("scrollChatList");
			});
		}
	}
	public async ValueTask DisposeAsync() {
		// Dispose of the timer to prevent memory leaks
		if (refreshTimer != null) {
			refreshTimer.Stop();
			refreshTimer.Dispose();
			refreshTimer = null;
		}
	}
	protected override async Task OnInitializedAsync() {
		using var context = DbFactory.CreateDbContext();

		// Add default values to the chat list
		var match = await MatchService.GetLatestActiveMatchAsync(UserSession.intUserID);
		if (match != null) {
			isMatched = true;
			intMatchID = match.intMatchID;
			otherUser = await MatchService.GetOtherUserFromMatchAsync(UserSession.intUserID ?? 0);

			// Update the other party's display info
			if (otherUser != null) {

				// Get other user's preferences
				TUserPreferences? otherUserPreferences = await UserService.GetUserPreferencesAsync(otherUser.intUserID);

				// Is profile shown?
				if (otherUserPreferences.blnShowProfile == true) {
					// Calculate age
					string strAge = "";

					if (otherUser.dtmDateOfBirth != null) {
						int intAge = DateTime.Now.Year - otherUser.dtmDateOfBirth.Value.Year;
						if (DateTime.Now.Date < otherUser.dtmDateOfBirth.Value.Date.AddYears(intAge)) {
							intAge--;
						}
						strAge = " (" + intAge + ")";
					}

					// Find nearest city/state

					// Use first name and age
					strDisplayName = otherUser.strFirstName + strAge;

					// Try and get profile pictures
					List<TUserMedia> myPictures = await MediaService.GetUserMediaAsync(UserSession.intUserID ?? 0);
					if (myPictures.Count > 0) {
						myProfilePicture = myPictures[0];
					}

					List<TUserMedia> theirPictures = await MediaService.GetUserMediaAsync(otherUser.intUserID);
					if (theirPictures.Count > 0) {
						theirProfilePicture = theirPictures[0];
					}

					// Get shared interests
					var sharedInterests = await context
					.Set<TInterests>()
					.FromSqlRaw(@"
                        SELECT TInterests.strInterest
                        FROM TInterests
                        JOIN TUserInterests ON TUserInterests.intInterestID = TInterests.intInterestID
                        JOIN TUsers ON TUserInterests.intUserID = TUsers.intUserID
                            AND TUsers.intUserID = {0}
                        WHERE TInterests.intInterestID IN (
                            SELECT TInterests.intInterestID
                            FROM TInterests
                            JOIN TUserInterests ON TUserInterests.intInterestID = TInterests.intInterestID
                            JOIN TUsers ON TUserInterests.intUserID = TUsers.intUserID
                                AND TUsers.intUserID = {1}
                        )",
						UserSession.intUserID, otherUser.intUserID
					)
					.Select(interest => interest.strInterest)
					.ToListAsync();

					if (sharedInterests.Count > 0) {
						lstChats.Add(("System", "Shared interests: " + string.Join(", ", sharedInterests) + "!"));
					}

					// Get other user bio
					if (!string.IsNullOrEmpty(otherUserPreferences.strBio)) {
						lstChats.Add(("System", "Bio: " + otherUserPreferences.strBio));
					}

					// Start refreshing the chat in a background task
					refreshTimer.Elapsed += RefreshChat;
					refreshTimer.AutoReset = true;
					refreshTimer.Enabled = true;
				}
				else {
					// Use username
					strDisplayName = otherUser.strUsername;
				}
			}

			StateHasChanged();
		}
	}

	private string GetImageSrc(TUserMedia? media) {
		if (media == null) {
			return "";
		}
		var base64 = Convert.ToBase64String(media.Photo);
		return $"data:image/jpeg;base64,{base64}";
	}

}