@page "/profile"
@layout MainLayout

@using Microsoft.EntityFrameworkCore;
@using SparkCheck.Data
@inject UserSessionService UserSession
@inject MediaService MediaService
@inject NavigationManager Navigation
@inject IDbContextFactory<AppDbContext> DbFactory
@inject LocationService LocationService
@inject IJSRuntime JS


@* Page Notes:
	-Front end is utilizing 'OnSubmit' instead of 'OnValidSubmit' which bypasses validation.
	-This is a test UI for the profile page.
	-This page is 90% functional - submit does not work yet.
*@


<h3>Edit Profile (Test UI)</h3>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <MudAlert Severity="Severity.Success">@SuccessMessage</MudAlert>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <MudAlert Severity="Severity.Error">@ErrorMessage</MudAlert>
}
@if (UserMediaFiles != null && UserMediaFiles.Any())
{
	Console.WriteLine("[DEBUG] Path = Not Null");
    foreach (var media in UserMediaFiles)
    {
        if (media.Photo != null)
        {
            <div class="m-2 d-inline-block text-center">
                <img src="@GetImageSrc(media.Photo)" alt="User Photo" class="img-thumbnail" width="150" />
                <MudButton Color="Color.Error" Size="Size.Small" OnClick="() => DeletePhotoAsync(media.intUserMediaID)">
                    Delete
                </MudButton>
            </div>
        }
    }
}
else
{
	Console.WriteLine("[DEBUG] Path = Null");
    <p>No photos uploaded yet. You can add one below.</p>
    
}

<MudPaper Class="pa-4 mt-4">
    <MudText Typo="Typo.h6">Upload Profile Photo</MudText>
    <InputFile OnChange="HandleImageUpload" />
</MudPaper>

<h3>Get Location </h3>
<button @onclick="GetLocationAsync">Get My Location</button>

@if (error != null)
{
    <p style="color:red">@error</p>
}
else if (latitude != 0 && longitude != 0)
{
    <p>Latitude: @latitude</p>
    <p>Longitude: @longitude</p>
}

<EditForm Model="@UserPreferences" OnValidSubmit="@HandleValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	
	<MudTextField @bind-Value="UserPreferences.intMatchDistance" Label="Match Distance (km)" Type="number" />
	<MudTextField @bind-Value="UserPreferences.intMinAge" Label="Minimum Age" Type="number" />
	<MudTextField @bind-Value="UserPreferences.intMaxAge" Label="Maximum Age" Type="number" />
	<MudSelect T="int" @bind-Value="UserPreferences.intAppUsageTypeID" Label="Gender Preference">
		@foreach (var gender in Genders)
		{
			<MudSelectItem Value="@gender.intGenderID">@gender.strGender</MudSelectItem>
		}
	</MudSelect>
	<MudSwitch T="bool" @bind-Checked="UserPreferences.blnReceiveEmails" Label="Receive Emails" />
	<MudSwitch T="bool" @bind-Checked="UserPreferences.blnShowProfile" Label="Show Profile to Others" />
	<MudTextField @bind-Value="UserPreferences.strBio" Label="Bio" Multiline Rows="3" />
	<MudSelect T="int" @bind-Value="UserPreferences.intAppUsageTypeID" Label="App Usage Type">
		@foreach (var usageType in AppUsageTypes)
		{
			<MudSelectItem Value="@usageType.intAppUsageTypeID">@usageType.strAppUsageType</MudSelectItem>
		}
	</MudSelect>

	<MudExpansionPanels Elevation="0">
    @foreach (var group in CategorizedInterests)
    {
        <MudExpansionPanel Text="@group.CategoryName"></MudExpansionPanel>
    }
	</MudExpansionPanels>

	<MudButton Type="Submit">Save Changes</MudButton>

</EditForm>

@code {
	int UserID = -1;
	private TUserPreferences UserPreferences = new();
	private List<TUserMedia> UserMediaFiles = new();
    private IBrowserFile? SelectedFile;
	public List<TAppUsageTypes> AppUsageTypes { get; set; } = new();
	public List<TGenders> Genders { get; set; } = new();

	//Only the lord knows why, but when this line is deleted the front end breaks.
	private List<InterestCategoryGroup> CategorizedInterests = new();
	private string? SuccessMessage;
	private string? ErrorMessage;
	private TUsers user = new();
	private UserLocation EffectiveLoaction = new();
	private decimal? CurrentLatitude;
	private decimal? CurrentLongitude;
	private decimal? FallbackLatitude;
	private decimal? FallbackLongitude;
	private bool LocationPermissionDenied = false;
	private decimal latitude;
    private decimal longitude;
    private string error = "";


	// ===================================================================================
	// Runs on view start up
	// ===================================================================================
	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("[DEBUG] OnInitializedAsync started.");

		try
		{
			int? UserIDTemp = UserSession.intUserID;
			Console.WriteLine("[DEBUG] UserIDTemp = {0}", UserIDTemp);

			if (UserIDTemp == null)
			{
				Console.WriteLine("[SECURITY] No valid session found. Redirecting to /welcome.");
				// Navigation.NavigateTo("/welcome", true);
				return;
			}

			UserID = UserIDTemp.Value;

			// Create a fresh DbContext using the factory
			using var db = DbFactory.CreateDbContext();

			// Load AppUsageTypes (EF query)
			AppUsageTypes = await db.TAppUsageTypes.AsNoTracking().ToListAsync();
			Genders = await db.TGenders.AsNoTracking().ToListAsync();
			Console.WriteLine("[DEBUG] AppUsageTypes: {0}", AppUsageTypes.Count);

			// Load user preferences (may be from a service that also uses db context)
			var TempPrefs = await GetPreferencesByUserIDAsync();
			if (TempPrefs != null)
			{
				UserPreferences = TempPrefs;
				Console.WriteLine("[DEBUG] UserPreferences loaded for UserID: {0}", UserID);
			}
			else
			{
				Console.WriteLine("[DEBUG] No preferences found for UserID: {0}", UserID);
				UserPreferences = new TUserPreferences { intUserID = UserID };
			}

			// Load media
			UserMediaFiles = await MediaService.GetUserMediaAsync(UserID);
			Console.WriteLine("[DEBUG] UserMediaFiles: {0}", UserMediaFiles.Count);

			foreach (var media in UserMediaFiles)
			{
				media.intUserID = UserID;
			}

			// Location logic — doesn't use EF directly
			

			var effectiveLocation = await LocationService.GetEffectiveUserLocationAsync(UserID);

			CurrentLatitude = effectiveLocation.Latitude;
			CurrentLongitude = effectiveLocation.Longitude;

			LocationPermissionDenied = !effectiveLocation.IsFromBrowser;

			if (!effectiveLocation.IsFromBrowser)
			{
				FallbackLatitude = effectiveLocation.Latitude;
				FallbackLongitude = effectiveLocation.Longitude;
			}

			// User session
			user = UserSession.GetUser();
		}
		catch (Exception ex)
		{
			ErrorMessage = "Failed to load profile.";
			Console.WriteLine($"[INIT ERROR] {ex.Message}");
		}
	}


	// ===================================================================================
	// Handles form submission and updates user preferences
	// ===================================================================================
	private async Task HandleValidSubmit()
	{
		Console.WriteLine("[DEBUG] HandleValidSubmit() triggered");

		try
		{
			SuccessMessage = null;
			ErrorMessage = null;

			// Use a fresh, scoped context
			using var context = DbFactory.CreateDbContext();

			// Execute stored procedure
			await context.Database.ExecuteSqlRawAsync(
				@"EXEC uspUpdateUserPreferences 
					@intUserID = {0}, 
					@intMatchDistance = {1}, 
					@intMinAge = {2}, 
					@intMaxAge = {3},
					@intGenderPreferenceID = {4}, 
					@blnReceiveEmails = {5}, 
					@blnShowProfile = {6}, 
					@strBio = {7}, 
					@intAppUsageTypeID = {8}",
				UserID,
				UserPreferences.intMatchDistance,
				UserPreferences.intMinAge,
				UserPreferences.intMaxAge,
				UserPreferences.intGenderPreferenceID,
				UserPreferences.blnReceiveEmails,
				UserPreferences.blnShowProfile,
				UserPreferences.strBio ?? "",
				UserPreferences.intAppUsageTypeID
			);

			// Upload media using external service (likely doesn’t touch EF directly)
			if (SelectedFile != null)
			{
				await MediaService.UploadOrUpdateProfilePhotoAsync(SelectedFile, UserID);
				Console.WriteLine("[PROGRAM] Profile photo uploaded/updated.");
			}

			Console.WriteLine(@"[PROGRAM] User preferences updated for UserID: {0}, 
								User's name: {1}, {2}.",
				UserID, UserSession.strFirstName, UserSession.strLastName);

			// Save location to the user entity
			if (user != null)
			{
				user.decLatitude = CurrentLatitude;
				user.decLongitude = CurrentLongitude;

				// Important: this will only succeed if 'user' is tracked
				context.TUsers.Attach(user); // optional, only if needed
				await context.SaveChangesAsync();
			}

			SuccessMessage = "Profile updated successfully!";
		}
		catch (Exception ex)
		{
			ErrorMessage = "Unexpected error while saving profile.";
			Console.WriteLine($"[EXCEPTION] {ex.Message}");
		}
	}


	
	// ===================================================================================
	// Handles Location Logic
	// ===================================================================================
    
	
	private async Task SaveFallbackLocation()
	{
		if (FallbackLatitude.HasValue && FallbackLongitude.HasValue)
		{
			bool success = await LocationService.SaveUserFallbackLocationAsync(UserID, FallbackLatitude.Value, FallbackLongitude.Value);
			if (success)
			{
				SuccessMessage = "Fallback location saved.";
				// Update current location to fallback
				CurrentLatitude = FallbackLatitude;
				CurrentLongitude = FallbackLongitude;
				LocationPermissionDenied = false;
			}
			else
			{
				ErrorMessage = "Failed to save fallback location.";
			}
		}
		else
		{
			ErrorMessage = "Please enter valid latitude and longitude.";
		}

		
	}
    private async Task GetLocationAsync()
    {
        try
        {
			Console.WriteLine("[DEBUG] Attempting to get browser location...");
            var result = await JS.InvokeAsync<GeolocationResult>("getBrowserLocation");
            latitude = result.Latitude;
            longitude = result.Longitude;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    public class GeolocationResult
    {
        public decimal Latitude { get; set; }
        public decimal Longitude { get; set; }
    }	
	
	
	// ===================================================================================
	// Handles Media Commands
	// ===================================================================================
    private async Task HandleUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        await MediaService.UploadOrUpdateProfilePhotoAsync(file, UserID);
    }

	private async Task HandleImageUpload(InputFileChangeEventArgs e)
	{
		var file = e.File;
		if (file != null && UserSession.intUserID != null)
		{
			var success = await MediaService.UploadPhotoAsync(UserSession.intUserID.Value, file);
			if (success)
			{
				SuccessMessage = "Photo uploaded!";
				UserMediaFiles = await MediaService.GetUserMediaAsync(UserSession.intUserID.Value); // reload
			}
			else
			{
				ErrorMessage = "Upload failed.";
			}
		}
	}

	private void OnPhotoSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
    }

	private async Task DeletePhotoAsync(int mediaID)
	{
		try
		{
			using var db = DbFactory.CreateDbContext();

			// Find the media record
			var mediaToDelete = await db.TUserMedia
				.FirstOrDefaultAsync(m => m.intUserMediaID == mediaID && m.intUserID == UserID);

			if (mediaToDelete != null)
			{
				db.TUserMedia.Remove(mediaToDelete);
				await db.SaveChangesAsync();

				// Refresh list
				UserMediaFiles = await MediaService.GetUserMediaAsync(UserID);

				SuccessMessage = "Photo deleted.";
			}
			else
			{
				ErrorMessage = "Photo not found.";
			}
		}
		catch (Exception ex)
		{
			ErrorMessage = "Failed to delete photo.";
			Console.WriteLine($"[Delete Error] {ex.Message}");
		}
	}


	// ===================================================================================
	// Database Read Methods
	// ===================================================================================

	public async Task<TUserPreferences?> GetPreferencesByUserIDAsync()
	{
		using var context = DbFactory.CreateDbContext();
		return await context.TUserPreferences
					.FirstOrDefaultAsync(p => p.intUserID == UserID);
	}
	
    private string GetImageSrc(byte[] imageBytes)
    {
        var base64 = Convert.ToBase64String(imageBytes);
        return $"data:image/jpeg;base64,{base64}";
    }
}


<script>
    window.getBrowserLocation = function () {
        return new Promise((resolve, reject) => {
            if (!navigator.geolocation) {
                reject("Geolocation not supported.");
                return;
            }

            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const result = {
                        success: true,
                        latitude: position.coords.latitude,
                        longitude: position.coords.longitude
                    };

                    // Display temporary popup
                    showLocationPopup(result.latitude, result.longitude);

                    resolve(result);
                },
                (error) => {
                    console.error("[JS] Geolocation error:", error.message);
                    reject("Geolocation error: " + error.message);
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 10000 // Use cached location if < 10s old
                }
            );
        });
    };

    function showLocationPopup(latitude, longitude) {
        // Remove existing popup if present
        let existing = document.getElementById("geo-popup");
        if (existing) {
            existing.remove();
        }

        // Create new popup
        const popup = document.createElement("div");
        popup.id = "geo-popup";
        popup.innerText = `📍 Location: ${latitude.toFixed(5)}, ${longitude.toFixed(5)}`;
        popup.style.position = "fixed";
        popup.style.bottom = "20px";
        popup.style.left = "50%";
        popup.style.transform = "translateX(-50%)";
        popup.style.backgroundColor = "#323232";
        popup.style.color = "white";
        popup.style.padding = "10px 20px";
        popup.style.borderRadius = "8px";
        popup.style.boxShadow = "0 2px 10px rgba(0,0,0,0.2)";
        popup.style.zIndex = "10000";
        popup.style.fontSize = "1rem";

        document.body.appendChild(popup);

        // Remove after 5 seconds
        setTimeout(() => {
            popup.remove();
        }, 5000);
    }
</script>