@page "/matchqueue"
@layout MainLayout
@inherits SparkCheck.Shared.SecureBasePage
@implements IAsyncDisposable
<MudContainer MaxWidth="MaxWidth.False" Class="d-flex flex-column min-vh-100 justify-center align-center px-4">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Elevation="0" Dense="true" Style="margin-bottom: 1rem;">
            @errorMessage
        </MudAlert>
    }

    <MudText Typo="Typo.h5" Class="mb-4 text-center">
        Find a match now
    </MudText>

    <MudText Typo="Typo.subtitle1" Class="mb-4 text-center">
        @($"There are currently {onlineUserCount} users online")
    </MudText>

    <MudStack Spacing="2" Class="w-full">
        <MudButton Variant="Variant.Filled" FullWidth="true" Disabled="@(isQueueing)"
            OnClick="@(() => @StartMatching())">
            Start Matching...
        </MudButton>

        <MudButton Variant="Variant.Filled" FullWidth="true" Disabled="@(!isQueueing)"
            OnClick="@(() => @StopMatching())">
            Stop
        </MudButton>
    </MudStack>

    <MudSpacer />
    <BottomNavBar />
</MudContainer>

@inject UserService UserService
@inject MatchService MatchService
@inject HttpClient HttpClient
@code {
    private int onlineUserCount;
    private bool isQueueing = false;
    private String? errorMessage = null;
    protected override async Task OnInitializedAsync()
    {
        onlineUserCount = await UserService.GetOnlineUserCountAsync();
        if (await MatchService.GetLatestActiveMatchAsync(UserSession.intUserID) != null)
        {
            Navigation.NavigateTo("/match");
        }
    }
    public async ValueTask DisposeAsync()
    {
        await StopMatching();
    }
    private async Task StartMatching()
    {
        errorMessage = null;
        isQueueing = true;
        StateHasChanged();

        try
        {
            var response = await
            HttpClient.GetAsync($"http://sparkcheck-matcher:9988/enterQueue?intUserID={UserSession.intUserID}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var json = System.Text.Json.JsonDocument.Parse(content);
                var status = json.RootElement.GetProperty("status").GetString();
                switch (status)
                {
                    case "success":
                        Navigation.NavigateTo("/match");
                        break;
                    case "error":
                        errorMessage = json.RootElement.GetProperty("message").GetString();
                        await StopMatching();
                        break;
                    case "stopped":
                        break;
                    default:
                        errorMessage = content;
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error starting match: {ex.Message}";
        }
        finally
        {
            isQueueing = false;
            StateHasChanged();
        }
    }

    private async Task StopMatching()
    {
        try
        {
            await HttpClient.GetAsync($"http://sparkcheck-matcher:9988/exitQueue?intUserID={UserSession.intUserID}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error stopping match: {ex.Message}";
        }
    }
}